plugins {
    id 'org.springframework.boot' version '3.0.6'
    id 'jacoco'
    id 'com.google.cloud.tools.jib' version '3.3.1'
}

build {
    dependsOn(tasks.jibDockerBuild)
    dependsOn(tasks.jib)
}

jib {
    to {
        image = "osvasldas97/${name}"
        tags = [version, "${version}"]
    }
    jib.to.image "osvasldas97/${name}:${version}"
}

dependencies {
    implementation(
        project(':amqp'),
        project(':api'),
        libs.springBootStarterAmqp,
        libs.springBootStarterDataJpa,
        libs.springDataEnvers,
        libs.springBootStarterActuator,
        libs.springBootStarterDataRedis,
        libs.liquibaseCore,
        libs.openApi,
        libs.mapstruct,
        libs.postgresql,
        libs.feign,
        libs.prometheus,
        libs.jacksonDatatypeJsr310,
        libs.vault,
        libs.shedlockSpring,
        libs.shedlockProvider
    )

    annotationProcessor(
        libs.mapstructProcessor,
        libs.jpamodelgen
    )

    testImplementation(
        libs.groovy,
        libs.spockCore,
        libs.spockSpring,
        libs.testcontainers,
        libs.testcontainersSpock,
        libs.testcontainersPostgresql,
        libs.testcontainersVault,
        libs.testcontainersRabbitmq,
        libs.springTestRedis,
        libs.wiremock
    )
}

check {
    dependsOn(tasks.jacocoTestCoverageVerification)
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = '0.7'.toBigDecimal()
            }
        }
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml { enabled true }
        html { enabled false }
        csv { enabled false }
        xml.destination file("${buildDir}/reports/jacoco.xml")
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}